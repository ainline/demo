<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       ">

    <bean id="accountService" class="com.alchen.demo.spring.aopxml.service.impl.AccountServiceImpl"></bean>


    <!--spring中基于xml配置AOP的步骤
        1.把通知bean交给spring来管理
        2.配置aop:config标签开始aop配置
        3.aop:aspect配置切面
            id:切面的唯一标识
            ref:指定通知类的bean的id
        4.在aop:aspect内部使用对应标签配置通知类型。
            aop:before 前置通知
                method:指定通知类中哪个方法作为前置通知
                pointcut:指定切入点表达式，该表达式是指对业务层中哪些方法进行增强
                切入点表达式写法：
                    execution(修饰符 返回值 包名.包名...类名.方法名(参数列表))
                标准表达式写法：public void com.alchen.demo.spring.aopxml.service.impl.AccountServiceImpl.saveAccount()
                    访问修饰符可以省略 void com.alchen.demo.spring.aopxml.service.impl.AccountServiceImpl.saveAccount()
                    返回值可以使用通配符，标识任意返回值 * com.alchen.demo.spring.aopxml.service.impl.AccountServiceImpl.saveAccount()
                    包可以使用通配符，有几层包就写几个 * *.*.*.*.*.*.*.AccountServiceImpl.saveAccount()
                    *..表示任意包下的指定方法都会被增强 * *..AccountServiceImpl.saveAccount()
                    类名和方法名都可以使用*号通配符 * *..*.*()
                    参数列表：
                        可以直接写数据类型：
                            基本类型直接写 例如int
                            引用类型写包.类 java.lang.String
                        可以使用*通配符标识任意类型，必须有参数
                        可以使用..匹配，所有参数类型，参数个数全匹配
                全通配符写法：* *..*.*(..)
                一般写法：* com.alchen.demo.spring.aopxml.service.*.*(..)
    -->
    <bean id="logger" class="com.alchen.demo.spring.aopxml.utils.Logger"></bean>

    <!-- 配置AOP -->
    <aop:config>
        <!-- 配置切面-->
        <aop:aspect id="loggerAdvice" ref="logger">
            <!--配置切入点表达式,配置在切面内，只在当前切面有效，配置在切面外，全部切面都可以引用。！如果放在切面外，必须放在配置切面之前-->
            <aop:pointcut id="log" expression="execution(* com.alchen.demo.spring.aopxml.service.*.*(..))"/>
            <!-- 配置通知的类型 -->

            <!-- 前置通知：在切入点执行之前执行-->
            <aop:before method="before" pointcut-ref="log"/>
            <!--后置通知：在切入点方法正常执行之后执行,和异常通知只能有一个被执行-->
            <aop:after-returning method="afterReturning" pointcut-ref="log"/>
            <!--异常通知：切入点方法执行产生异常之后执行，和后置通知只能有一个被执行-->
            <aop:after-throwing method="afterThrowing" pointcut-ref="log"/>
            <!--最终通知：无论切入点是否正常执行，都会在其后执行-->
            <aop:after method="after" pointcut-ref="log"/>

            <!--环绕通知，区分以上通知配置，是以代码中增强代码所在位置实现不同的通知类型-->
            <aop:around method="pringLog" pointcut-ref="log"></aop:around>
        </aop:aspect>
    </aop:config>


</beans>